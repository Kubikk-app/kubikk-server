datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int                    @id @default(autoincrement())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  fio           String
  email         String                 @unique()
  password      String
  avatar_link   String?
  ProjectMember ProjectMember[]
  organizations UsersOnOrganizations[]
}

model UsersOnOrganizations {
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           OrganizationRole @relation(fields: [roleId], references: [id])
  roleId         Int

  @@id([userId, organizationId])
}

model ProjectMember {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  projectId     Int
  project       Project     @relation(fields: [projectId], references: [id])
  projectTeamId Int
  team          ProjectTeam @relation(fields: [projectTeamId], references: [id])
}

model Organization {
  id       Int                    @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name     String                 @unique
  iconLink String
  projects Project[]
  roles    OrganizationRole[]
  users    UsersOnOrganizations[]
}

model OrganizationRole {
  id                Int                    @id @default(autoincrement())
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  label             String
  canManageMembers  Boolean                @default(false)
  canRenameOrg      Boolean                @default(false)
  canManageProjects Boolean                @default(false)
  organizationId    Int
  organization      Organization           @relation(fields: [organizationId], references: [id])
  users             UsersOnOrganizations[]
}

model Project {
  id             Int             @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  name           String
  description    String
  organizationId Int
  organization   Organization    @relation(fields: [organizationId], references: [id])
  members        ProjectMember[]
  teams          ProjectTeam[]
  ProjectRole    ProjectRole[]
}

model ProjectTeam {
  id        Int             @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  label     String
  members   ProjectMember[]
  projectId Int
  project   Project         @relation(fields: [projectId], references: [id])
}

model ProjectRole {
  id                     Int     @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  projectId              Int
  project                Project @relation(fields: [projectId], references: [id])
  label                  String
  canManageProject       Boolean @default(false)
  canManageTeams         Boolean @default(false)
  canManageMembers       Boolean @default(false)
  canInteractWithClients Boolean @default(false)
}

model MessengerIntegration {
  id           Int    @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  label        String @unique
  projectId    Int
  adapterLabel String
  apiKey       String
}
